# -*- coding: utf-8 -*-
"""ajason08util.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15JkaK_n8fzg4_jxE05lXVHLMnjM6HquT

**Debugging**
"""

import time
class Stopwatch:
  def __init__(self):
    self._started = time.time()
    self._last_started = self._started
    self._laps = []
    self._totaltime = "please call stop() first!"    

  def _humanizetime(self,elapsed_time):
    mins = int(elapsed_time / 60)
    secs = int(elapsed_time - (mins * 60))
    return f'Time: {mins}m {secs}s'    

  def stop(self, verbose=True):
    stoptimer = time.time()
    elapsed_time = stoptimer - self._started
    self._totaltime = self._humanizetime(elapsed_time)
    
    # calculating lap time
    elapsed_time = stoptimer - self._last_started    
    lap = self._humanizetime(elapsed_time)
    self._laps.append(lap)    
    if verbose: print(lap)        
    self._last_started = time.time()

  # read-only properties
  @property
  def laps(self):
   return self._laps
  @property
  def totaltime(self):
   return self._totaltime

class Ajfiles:
  # convert a byte amount into kilobytes, megabytes or gigabytes
  def humanize_bytes(bytes_size,round_degree=2,measure="g"):
    switcher = {
        "g": 2**30,
        "m": 2**20,
        "k": 2**10
    }
    division = switcher[measure]
    return "{} {}b".format(round(bytes_size/division, round_degree),measure)

class Ajstructures:
  # Filter a list, based on another list
  def reference_list_filter(mylist, reference):  
    index_found = list(filter(lambda x: mylist[x] in reference, range(len(mylist)))) 
    return [mylist[x] for x in index_found]  

  #  print pairs(key,values)
  def printdict(mydict, separator = "=="):
    for key in list(mydict.keys()):
      print(f'{key} {separator} {mydict[key]}')

def testing_stopwatch():
  mywatch = Stopwatch()
  time.sleep(2)
  mywatch.stop()
  print(mywatch.laps)
  time.sleep(3)
  mywatch.stop()
  print(mywatch.laps)
  print(mywatch.totaltime)

def testing_Ajfiles():
  print(Ajfiles.humanize_bytes(545646546546,measure="k"))

def testing_Ajstructures():
  mylist = [2,4,6,8,10,12,14,16]
  reference = [6,7,8,9,16]
  print(Ajstructures.reference_list_filter(mylist,reference))

testing_Ajstructures()

